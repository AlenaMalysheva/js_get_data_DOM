{"mappings":"ACEA,IAAM,EAAkB,SAAS,gBAAgB,CAAC,mBAC5C,EAAwB,SAAS,aAAa,CAAC,2BAC/C,EAAsB,SAAS,aAAa,CAAC,yBAM7C,EAAsB,AAJJ,MAAM,IAAI,CAAC,GAAiB,GAAG,CACrD,SAAC,CADH,EACY,OAAA,EAAK,WAAW,A,GAGgB,GAAG,CAAC,SAAC,CAAjD,EACE,OAAO,EAAW,KAAK,CAAC,KAAK,IAAI,CAAC,GACpC,GAIK,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAFI,EAEC,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACE,MAAM,OAAO,KAChB,CAAA,EAAgB,EAAoB,GAAG,CAAC,SAAC,CAD3C,EACmD,OAAA,SAAS,EAAK,G,E,C,C,C,M,E,CAF9D,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAML,IAAM,EAAQ,EAAc,MAAM,CAAC,SAAC,CAAA,CAAM,CAA1C,EAAsD,OAAA,EAAO,CAAS,EAAA,GAChE,EAAU,EAAQ,EAAc,MAAM,CAEtC,EAAiB,EAAM,cAAc,CAAC,SACtC,EAAmB,EAAQ,cAAc,CAAC,SAE5C,GAAoB,IACtB,EAAsB,WAAW,CAAG,EACpC,EAAoB,WAAW,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar populationSpans = document.querySelectorAll(\"span.population\");\nvar averagePopulationSpan = document.querySelector(\"span.average-population\");\nvar totalPopulationSpan = document.querySelector(\"span.total-population\");\nvar populationTexts = Array.from(populationSpans).map(function(span) {\n    return span.textContent;\n});\nvar numbersWithoutComma = populationTexts.map(function(population) {\n    return population.split(\",\").join(\"\");\n});\nvar parsedNumbers;\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = numbersWithoutComma[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var strNum = _step.value;\n        if (!isNaN(Number(strNum))) parsedNumbers = numbersWithoutComma.map(function(int) {\n            return parseInt(int, 10);\n        });\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar total = parsedNumbers.reduce(function(prev, current) {\n    return prev + current;\n}, 0);\nvar avarage = total / parsedNumbers.length;\nvar formatUsaTotal = total.toLocaleString(\"en-US\");\nvar formatUsaAvarage = avarage.toLocaleString(\"en-US\");\nif (formatUsaAvarage && formatUsaTotal) {\n    averagePopulationSpan.textContent = formatUsaAvarage;\n    totalPopulationSpan.textContent = formatUsaTotal;\n}\n\n//# sourceMappingURL=index.96569c6d.js.map\n","'use strict';\n\nconst populationSpans = document.querySelectorAll('span.population');\nconst averagePopulationSpan = document.querySelector('span.average-population');\nconst totalPopulationSpan = document.querySelector('span.total-population');\n\nconst populationTexts = Array.from(populationSpans).map(\n  (span) => span.textContent,\n);\n\nconst numbersWithoutComma = populationTexts.map((population) => {\n  return population.split(',').join('');\n});\n\nlet parsedNumbers;\n\nfor (const strNum of numbersWithoutComma) {\n  if (!isNaN(Number(strNum))) {\n    parsedNumbers = numbersWithoutComma.map((int) => parseInt(int, 10));\n  }\n}\n\nconst total = parsedNumbers.reduce((prev, current) => prev + current, 0);\nconst avarage = total / parsedNumbers.length;\n\nconst formatUsaTotal = total.toLocaleString('en-US');\nconst formatUsaAvarage = avarage.toLocaleString('en-US');\n\nif (formatUsaAvarage && formatUsaTotal) {\n  averagePopulationSpan.textContent = formatUsaAvarage;\n  totalPopulationSpan.textContent = formatUsaTotal;\n}\n"],"names":["populationSpans","document","querySelectorAll","averagePopulationSpan","querySelector","totalPopulationSpan","numbersWithoutComma","populationTexts","Array","from","map","span","textContent","population","split","join","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","parsedNumbers","_step","_iterator","Symbol","iterator","next","done","strNum","value","isNaN","Number","int","parseInt","err","return","total","reduce","prev","current","avarage","length","formatUsaTotal","toLocaleString","formatUsaAvarage"],"version":3,"file":"index.96569c6d.js.map"}